//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AccountClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    login(command: LoginCommand): Promise<LoginResponse> {
        let url_ = this.baseUrl + "/api/Account/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<LoginResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LoginResponse>(null as any);
    }

    register(command: RegisterAnUserCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Account/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    checkDuplicateEmail(email: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Account/CheckDuplicateEmail?";
        if (email !== undefined && email !== null)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicateEmail(_response);
        });
    }

    protected processCheckDuplicateEmail(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    checkDuplicatePhone(phone: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Account/CheckDuplicatePhone?";
        if (phone !== undefined && phone !== null)
            url_ += "Phone=" + encodeURIComponent("" + phone) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicatePhone(_response);
        });
    }

    protected processCheckDuplicatePhone(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class EmployeeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    checkAvailableCandidateEmployee(email: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Employee/CheckAvailableCandidateEmployee?";
        if (email !== undefined && email !== null)
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckAvailableCandidateEmployee(_response);
        });
    }

    protected processCheckAvailableCandidateEmployee(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getEnterpriseEmployeeList(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfEnterpriseEmployeeDto> {
        let url_ = this.baseUrl + "/api/Employee/GetEnterpriseEmployeeList?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseEmployeeList(_response);
        });
    }

    protected processGetEnterpriseEmployeeList(response: Response): Promise<SearchPageResponseOfEnterpriseEmployeeDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfEnterpriseEmployeeDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfEnterpriseEmployeeDto>(null as any);
    }

    getDetailEnterpriseEmployee(id: string | undefined): Promise<EnterpriseEmployeeDetailDto> {
        let url_ = this.baseUrl + "/api/Employee/GetDetailEnterpriseEmployee?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetailEnterpriseEmployee(_response);
        });
    }

    protected processGetDetailEnterpriseEmployee(response: Response): Promise<EnterpriseEmployeeDetailDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EnterpriseEmployeeDetailDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseEmployeeDetailDto>(null as any);
    }

    getCandidateEmployee(candidateEmployeeEmail: string | null | undefined): Promise<UserMinimalInfo> {
        let url_ = this.baseUrl + "/api/Employee/GetCandidateEmployee?";
        if (candidateEmployeeEmail !== undefined && candidateEmployeeEmail !== null)
            url_ += "CandidateEmployeeEmail=" + encodeURIComponent("" + candidateEmployeeEmail) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCandidateEmployee(_response);
        });
    }

    protected processGetCandidateEmployee(response: Response): Promise<UserMinimalInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserMinimalInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserMinimalInfo>(null as any);
    }

    createEmployee(command: CreateEmployeeCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Employee/CreateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateEmployee(_response);
        });
    }

    protected processCreateEmployee(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    updateEmployee(command: UpdateEmployeeCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Employee/UpdateEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateEmployee(_response);
        });
    }

    protected processUpdateEmployee(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    deleteEmployee(command: DeleteEmployeeCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Employee/DeleteEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteEmployee(_response);
        });
    }

    protected processDeleteEmployee(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    joinEmployee(command: JoinEmployeeCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Employee/JoinEmployee";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJoinEmployee(_response);
        });
    }

    protected processJoinEmployee(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }
}

export class EnterpriseTypeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(): Promise<EnterpriseTypeDto[]> {
        let url_ = this.baseUrl + "/api/EnterpriseType/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<EnterpriseTypeDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EnterpriseTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseTypeDto[]>(null as any);
    }
}

export class GoodsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    checkDuplicateBarcode(barcode: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Goods/CheckDuplicateBarcode?";
        if (barcode !== undefined && barcode !== null)
            url_ += "Barcode=" + encodeURIComponent("" + barcode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicateBarcode(_response);
        });
    }

    protected processCheckDuplicateBarcode(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getMyGoodses(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfMyGoodsDto> {
        let url_ = this.baseUrl + "/api/Goods/GetMyGoodses?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyGoodses(_response);
        });
    }

    protected processGetMyGoodses(response: Response): Promise<SearchPageResponseOfMyGoodsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfMyGoodsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfMyGoodsDto>(null as any);
    }

    getInfoOfGoodsForUpdating(id: string | undefined): Promise<MyGoodsInfoDto> {
        let url_ = this.baseUrl + "/api/Goods/GetInfoOfGoodsForUpdating?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInfoOfGoodsForUpdating(_response);
        });
    }

    protected processGetInfoOfGoodsForUpdating(response: Response): Promise<MyGoodsInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyGoodsInfoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyGoodsInfoDto>(null as any);
    }

    getListProductForCashier(search: string | null | undefined, enterpriseId: string | undefined): Promise<MyGoodsForCashierDto[]> {
        let url_ = this.baseUrl + "/api/Goods/GetListProductForCashier?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (enterpriseId === null)
            throw new Error("The parameter 'enterpriseId' cannot be null.");
        else if (enterpriseId !== undefined)
            url_ += "EnterpriseId=" + encodeURIComponent("" + enterpriseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListProductForCashier(_response);
        });
    }

    protected processGetListProductForCashier(response: Response): Promise<MyGoodsForCashierDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MyGoodsForCashierDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyGoodsForCashierDto[]>(null as any);
    }
}

export class GoodsTypeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(onlyRoot: boolean | undefined): Promise<GoodsTypeDto[]> {
        let url_ = this.baseUrl + "/api/GoodsType/GetAll?";
        if (onlyRoot === null)
            throw new Error("The parameter 'onlyRoot' cannot be null.");
        else if (onlyRoot !== undefined)
            url_ += "OnlyRoot=" + encodeURIComponent("" + onlyRoot) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: Response): Promise<GoodsTypeDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GoodsTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GoodsTypeDto[]>(null as any);
    }
}

export class MyEnterpriseClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getOwned(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfMyEnterpriseDto> {
        let url_ = this.baseUrl + "/api/MyEnterprise/GetOwned?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOwned(_response);
        });
    }

    protected processGetOwned(response: Response): Promise<SearchPageResponseOfMyEnterpriseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfMyEnterpriseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfMyEnterpriseDto>(null as any);
    }

    getMyEnterpriseInfo(id: string | undefined): Promise<MyEnterpriseDto> {
        let url_ = this.baseUrl + "/api/MyEnterprise/GetMyEnterpriseInfo?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyEnterpriseInfo(_response);
        });
    }

    protected processGetMyEnterpriseInfo(response: Response): Promise<MyEnterpriseDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyEnterpriseDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyEnterpriseDto>(null as any);
    }

    create(photo_PhotoFile: any[] | null | undefined, info_Code: string | null | undefined, info_Name: string | null | undefined, info_Description: string | null | undefined, info_Phone: string | null | undefined, info_Email: string | null | undefined, info_EnterpriseTypeId: number | undefined, photo_Photo: string | null | undefined, address_Street: string | null | undefined, address_SubDistrict: string | null | undefined, address_District: string | null | undefined, address_City: string | null | undefined, address_Province: string | null | undefined, address_PostalCode: string | null | undefined, address_Latitude: number | undefined, address_Longitude: number | undefined): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyEnterprise/Create?";
        if (photo_PhotoFile !== undefined && photo_PhotoFile !== null)
            photo_PhotoFile && photo_PhotoFile.forEach((item, index) => {
                for (const attr in item)
        			if (item.hasOwnProperty(attr)) {
        				url_ += "Photo.PhotoFile[" + index + "]." + attr + "=" + encodeURIComponent("" + (item as any)[attr]) + "&";
        			}
            });
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (info_Code !== null && info_Code !== undefined)
            content_.append("Info.Code", info_Code.toString());
        if (info_Name !== null && info_Name !== undefined)
            content_.append("Info.Name", info_Name.toString());
        if (info_Description !== null && info_Description !== undefined)
            content_.append("Info.Description", info_Description.toString());
        if (info_Phone !== null && info_Phone !== undefined)
            content_.append("Info.Phone", info_Phone.toString());
        if (info_Email !== null && info_Email !== undefined)
            content_.append("Info.Email", info_Email.toString());
        if (info_EnterpriseTypeId === null || info_EnterpriseTypeId === undefined)
            throw new Error("The parameter 'info_EnterpriseTypeId' cannot be null.");
        else
            content_.append("Info.EnterpriseTypeId", info_EnterpriseTypeId.toString());
        if (photo_Photo !== null && photo_Photo !== undefined)
            content_.append("Photo.Photo", photo_Photo.toString());
        if (address_Street !== null && address_Street !== undefined)
            content_.append("Address.Street", address_Street.toString());
        if (address_SubDistrict !== null && address_SubDistrict !== undefined)
            content_.append("Address.SubDistrict", address_SubDistrict.toString());
        if (address_District !== null && address_District !== undefined)
            content_.append("Address.District", address_District.toString());
        if (address_City !== null && address_City !== undefined)
            content_.append("Address.City", address_City.toString());
        if (address_Province !== null && address_Province !== undefined)
            content_.append("Address.Province", address_Province.toString());
        if (address_PostalCode !== null && address_PostalCode !== undefined)
            content_.append("Address.PostalCode", address_PostalCode.toString());
        if (address_Latitude === null || address_Latitude === undefined)
            throw new Error("The parameter 'address_Latitude' cannot be null.");
        else
            content_.append("Address.Latitude", address_Latitude.toString());
        if (address_Longitude === null || address_Longitude === undefined)
            throw new Error("The parameter 'address_Longitude' cannot be null.");
        else
            content_.append("Address.Longitude", address_Longitude.toString());

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    checkAvailableEnterpriseCode(code: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/MyEnterprise/CheckAvailableEnterpriseCode?";
        if (code !== undefined && code !== null)
            url_ += "Code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckAvailableEnterpriseCode(_response);
        });
    }

    protected processCheckAvailableEnterpriseCode(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getAvailableEnterpriseCode(name: string | null | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/api/MyEnterprise/GetAvailableEnterpriseCode?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAvailableEnterpriseCode(_response);
        });
    }

    protected processGetAvailableEnterpriseCode(response: Response): Promise<string[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string[]>(null as any);
    }

    getEnterpriseToken(enterpriseId: string | undefined): Promise<EnterpriseTokenDto> {
        let url_ = this.baseUrl + "/api/MyEnterprise/GetEnterpriseToken?";
        if (enterpriseId === null)
            throw new Error("The parameter 'enterpriseId' cannot be null.");
        else if (enterpriseId !== undefined)
            url_ += "EnterpriseId=" + encodeURIComponent("" + enterpriseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseToken(_response);
        });
    }

    protected processGetEnterpriseToken(response: Response): Promise<EnterpriseTokenDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EnterpriseTokenDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseTokenDto>(null as any);
    }

    getOmzetMyEnterprise(year: number | undefined): Promise<ResultOmzetLineDiagram> {
        let url_ = this.baseUrl + "/api/MyEnterprise/GetOmzetMyEnterprise?";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetOmzetMyEnterprise(_response);
        });
    }

    protected processGetOmzetMyEnterprise(response: Response): Promise<ResultOmzetLineDiagram> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultOmzetLineDiagram.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultOmzetLineDiagram>(null as any);
    }
}

export class MyGoodsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    checkDuplicateBarcode(barcode: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/MyGoods/CheckDuplicateBarcode?";
        if (barcode !== undefined && barcode !== null)
            url_ += "Barcode=" + encodeURIComponent("" + barcode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicateBarcode(_response);
        });
    }

    protected processCheckDuplicateBarcode(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getMyGoodses(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfMyGoodsDto> {
        let url_ = this.baseUrl + "/api/MyGoods/GetMyGoodses?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyGoodses(_response);
        });
    }

    protected processGetMyGoodses(response: Response): Promise<SearchPageResponseOfMyGoodsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfMyGoodsDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfMyGoodsDto>(null as any);
    }

    getInfoOfGoodsForUpdating(id: string | undefined): Promise<MyGoodsInfoDto> {
        let url_ = this.baseUrl + "/api/MyGoods/GetInfoOfGoodsForUpdating?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetInfoOfGoodsForUpdating(_response);
        });
    }

    protected processGetInfoOfGoodsForUpdating(response: Response): Promise<MyGoodsInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MyGoodsInfoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyGoodsInfoDto>(null as any);
    }

    create(name: string | undefined, description: string | null | undefined, goodsTypeId: number | undefined, barcode: string | undefined, photo: string | null | undefined, photoString: string | null | undefined, photoFile: FileParameter | null | undefined, contain: number | undefined, availableOnline: number | undefined, parentBarcode: string | null | undefined, goodsGroups: string[] | null | undefined, wholesalesPrices: WholesalesPrice2[] | undefined, price: number | undefined, buyPrice: number | undefined, isWholesalerPriceAuto: number | undefined, n: number | undefined, threshold: number | undefined): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoods/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (goodsTypeId === null || goodsTypeId === undefined)
            throw new Error("The parameter 'goodsTypeId' cannot be null.");
        else
            content_.append("GoodsTypeId", goodsTypeId.toString());
        if (barcode === null || barcode === undefined)
            throw new Error("The parameter 'barcode' cannot be null.");
        else
            content_.append("Barcode", barcode.toString());
        if (photo !== null && photo !== undefined)
            content_.append("Photo", photo.toString());
        if (photoString !== null && photoString !== undefined)
            content_.append("PhotoString", photoString.toString());
        if (photoFile !== null && photoFile !== undefined)
            content_.append("PhotoFile", photoFile.data, photoFile.fileName ? photoFile.fileName : "PhotoFile");
        if (contain === null || contain === undefined)
            throw new Error("The parameter 'contain' cannot be null.");
        else
            content_.append("Contain", contain.toString());
        if (availableOnline === null || availableOnline === undefined)
            throw new Error("The parameter 'availableOnline' cannot be null.");
        else
            content_.append("AvailableOnline", availableOnline.toString());
        if (parentBarcode !== null && parentBarcode !== undefined)
            content_.append("ParentBarcode", parentBarcode.toString());
        if (goodsGroups !== null && goodsGroups !== undefined)
            goodsGroups.forEach(item_ => content_.append("GoodsGroups", item_.toString()));
        if (wholesalesPrices === null || wholesalesPrices === undefined)
            throw new Error("The parameter 'wholesalesPrices' cannot be null.");
        else
            wholesalesPrices.forEach(item_ => content_.append("WholesalesPrices", item_.toString()));
        if (price === null || price === undefined)
            throw new Error("The parameter 'price' cannot be null.");
        else
            content_.append("Price", price.toString());
        if (buyPrice === null || buyPrice === undefined)
            throw new Error("The parameter 'buyPrice' cannot be null.");
        else
            content_.append("BuyPrice", buyPrice.toString());
        if (isWholesalerPriceAuto === null || isWholesalerPriceAuto === undefined)
            throw new Error("The parameter 'isWholesalerPriceAuto' cannot be null.");
        else
            content_.append("IsWholesalerPriceAuto", isWholesalerPriceAuto.toString());
        if (n === null || n === undefined)
            throw new Error("The parameter 'n' cannot be null.");
        else
            content_.append("N", n.toString());
        if (threshold === null || threshold === undefined)
            throw new Error("The parameter 'threshold' cannot be null.");
        else
            content_.append("Threshold", threshold.toString());

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    update(id: string | undefined, barcode: string | null | undefined, name: string | null | undefined, description: string | null | undefined, goodsTypeId: number | undefined, photo: string | null | undefined, photoFile: FileParameter | null | undefined, contain: number | undefined, availableOnline: number | undefined, parentBarcode: string | null | undefined, isWholesalerPriceAuto: number | undefined, addGoodsGroups: string[] | null | undefined, removeGoodsGroups: string[] | null | undefined): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoods/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (id === null || id === undefined)
            throw new Error("The parameter 'id' cannot be null.");
        else
            content_.append("Id", id.toString());
        if (barcode !== null && barcode !== undefined)
            content_.append("Barcode", barcode.toString());
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (goodsTypeId === null || goodsTypeId === undefined)
            throw new Error("The parameter 'goodsTypeId' cannot be null.");
        else
            content_.append("GoodsTypeId", goodsTypeId.toString());
        if (photo !== null && photo !== undefined)
            content_.append("Photo", photo.toString());
        if (photoFile !== null && photoFile !== undefined)
            content_.append("PhotoFile", photoFile.data, photoFile.fileName ? photoFile.fileName : "PhotoFile");
        if (contain === null || contain === undefined)
            throw new Error("The parameter 'contain' cannot be null.");
        else
            content_.append("Contain", contain.toString());
        if (availableOnline === null || availableOnline === undefined)
            throw new Error("The parameter 'availableOnline' cannot be null.");
        else
            content_.append("AvailableOnline", availableOnline.toString());
        if (parentBarcode !== null && parentBarcode !== undefined)
            content_.append("ParentBarcode", parentBarcode.toString());
        if (isWholesalerPriceAuto === null || isWholesalerPriceAuto === undefined)
            throw new Error("The parameter 'isWholesalerPriceAuto' cannot be null.");
        else
            content_.append("IsWholesalerPriceAuto", isWholesalerPriceAuto.toString());
        if (addGoodsGroups !== null && addGoodsGroups !== undefined)
            addGoodsGroups.forEach(item_ => content_.append("AddGoodsGroups", item_.toString()));
        if (removeGoodsGroups !== null && removeGoodsGroups !== undefined)
            removeGoodsGroups.forEach(item_ => content_.append("RemoveGoodsGroups", item_.toString()));

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    updateSellingPrice(commad: UpdateMyGoodsSellingPriceCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoods/UpdateSellingPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commad);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSellingPrice(_response);
        });
    }

    protected processUpdateSellingPrice(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    addStock(commad: AddMyGoodsStockCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoods/AddStock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commad);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddStock(_response);
        });
    }

    protected processAddStock(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    adjustStock(commad: AdjustMyGoodsStockCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoods/AdjustStock";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(commad);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdjustStock(_response);
        });
    }

    protected processAdjustStock(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    getListProductForCashier(search: string | null | undefined, enterpriseId: string | undefined): Promise<MyGoodsForCashierDto[]> {
        let url_ = this.baseUrl + "/api/MyGoods/GetListProductForCashier?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (enterpriseId === null)
            throw new Error("The parameter 'enterpriseId' cannot be null.");
        else if (enterpriseId !== undefined)
            url_ += "EnterpriseId=" + encodeURIComponent("" + enterpriseId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListProductForCashier(_response);
        });
    }

    protected processGetListProductForCashier(response: Response): Promise<MyGoodsForCashierDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MyGoodsForCashierDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MyGoodsForCashierDto[]>(null as any);
    }

    getListProductSellPrice(id: string | undefined, year: number | undefined, type: DiagramRangeSellPriceType | undefined): Promise<ResultSellPriceLineDiagram> {
        let url_ = this.baseUrl + "/api/MyGoods/GetListProductSellPrice?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListProductSellPrice(_response);
        });
    }

    protected processGetListProductSellPrice(response: Response): Promise<ResultSellPriceLineDiagram> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultSellPriceLineDiagram.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultSellPriceLineDiagram>(null as any);
    }

    getListProductBuyPrice(id: string | undefined, year: number | undefined, type: DiagramRangeBuyPriceType | undefined): Promise<ResultBuyPriceLineDiagram> {
        let url_ = this.baseUrl + "/api/MyGoods/GetListProductBuyPrice?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListProductBuyPrice(_response);
        });
    }

    protected processGetListProductBuyPrice(response: Response): Promise<ResultBuyPriceLineDiagram> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultBuyPriceLineDiagram.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultBuyPriceLineDiagram>(null as any);
    }

    getListProductNSold(id: string | undefined, year: number | undefined, type: DiagramRangeSoldType | undefined): Promise<ResultSoldLineDiagram> {
        let url_ = this.baseUrl + "/api/MyGoods/GetListProductNSold?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListProductNSold(_response);
        });
    }

    protected processGetListProductNSold(response: Response): Promise<ResultSoldLineDiagram> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultSoldLineDiagram.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultSoldLineDiagram>(null as any);
    }
}

export class MyGoodsGroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    checkDuplicateGoodsGroupName(name: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/MyGoodsGroup/CheckDuplicateGoodsGroupName?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicateGoodsGroupName(_response);
        });
    }

    protected processCheckDuplicateGoodsGroupName(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    getMyGoodsGroups(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfMyGoodsGroupDto> {
        let url_ = this.baseUrl + "/api/MyGoodsGroup/GetMyGoodsGroups?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyGoodsGroups(_response);
        });
    }

    protected processGetMyGoodsGroups(response: Response): Promise<SearchPageResponseOfMyGoodsGroupDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfMyGoodsGroupDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfMyGoodsGroupDto>(null as any);
    }

    create(command: CreateGoodsGroupCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/MyGoodsGroup/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }
}

export class OrderClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    createOrderOnline(): Promise<string> {
        let url_ = this.baseUrl + "/api/Order/CreateOrderOnline";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrderOnline(_response);
        });
    }

    protected processCreateOrderOnline(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    finishOrder(): Promise<string> {
        let url_ = this.baseUrl + "/api/Order/FinishOrder";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFinishOrder(_response);
        });
    }

    protected processFinishOrder(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    createOrderCashier(total: number | undefined, payment: number | undefined, return: number | undefined, to: string | null | undefined, items: ItemOrdered[] | null | undefined): Promise<CreateOrderCashierCommandResponse> {
        let url_ = this.baseUrl + "/api/Order/CreateOrderCashier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (total === null || total === undefined)
            throw new Error("The parameter 'total' cannot be null.");
        else
            content_.append("Total", total.toString());
        if (payment === null || payment === undefined)
            throw new Error("The parameter 'payment' cannot be null.");
        else
            content_.append("Payment", payment.toString());
        if (return === null || return === undefined)
            throw new Error("The parameter 'return' cannot be null.");
        else
            content_.append("Return", return.toString());
        if (to !== null && to !== undefined)
            content_.append("To", to.toString());
        if (items !== null && items !== undefined)
            items.forEach(item_ => content_.append("Items", item_.toString()));

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateOrderCashier(_response);
        });
    }

    protected processCreateOrderCashier(response: Response): Promise<CreateOrderCashierCommandResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrderCashierCommandResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateOrderCashierCommandResponse>(null as any);
    }

    getEnterpriseOrder(startCreatedAt: Date | null | undefined, endCreatedAt: Date | null | undefined, search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfOrderDto> {
        let url_ = this.baseUrl + "/api/Order/GetEnterpriseOrder?";
        if (startCreatedAt !== undefined && startCreatedAt !== null)
            url_ += "StartCreatedAt=" + encodeURIComponent(startCreatedAt ? "" + startCreatedAt.toISOString() : "") + "&";
        if (endCreatedAt !== undefined && endCreatedAt !== null)
            url_ += "EndCreatedAt=" + encodeURIComponent(endCreatedAt ? "" + endCreatedAt.toISOString() : "") + "&";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseOrder(_response);
        });
    }

    protected processGetEnterpriseOrder(response: Response): Promise<SearchPageResponseOfOrderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfOrderDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfOrderDto>(null as any);
    }

    getEnterpriseOrderDetail(id: string | undefined): Promise<DetailOrderDto> {
        let url_ = this.baseUrl + "/api/Order/GetEnterpriseOrderDetail?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseOrderDetail(_response);
        });
    }

    protected processGetEnterpriseOrderDetail(response: Response): Promise<DetailOrderDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DetailOrderDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DetailOrderDto>(null as any);
    }
}

export class RoleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    getEnterpriseClaim(query: GetAllEnterpriseClaimsQuery | null | undefined): Promise<EnterpriseClaimDto[]> {
        let url_ = this.baseUrl + "/api/Role/GetEnterpriseClaim?";
        if (query !== undefined && query !== null)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseClaim(_response);
        });
    }

    protected processGetEnterpriseClaim(response: Response): Promise<EnterpriseClaimDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EnterpriseClaimDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseClaimDto[]>(null as any);
    }

    getEnterpriseRoleClaim(id: string | undefined): Promise<EnterpriseRoleDetailDto> {
        let url_ = this.baseUrl + "/api/Role/GetEnterpriseRoleClaim?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseRoleClaim(_response);
        });
    }

    protected processGetEnterpriseRoleClaim(response: Response): Promise<EnterpriseRoleDetailDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EnterpriseRoleDetailDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseRoleDetailDto>(null as any);
    }

    getEnterpriseRolePage(search: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined): Promise<SearchPageResponseOfEnterpriseRoleDto> {
        let url_ = this.baseUrl + "/api/Role/GetEnterpriseRolePage?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseRolePage(_response);
        });
    }

    protected processGetEnterpriseRolePage(response: Response): Promise<SearchPageResponseOfEnterpriseRoleDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchPageResponseOfEnterpriseRoleDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchPageResponseOfEnterpriseRoleDto>(null as any);
    }

    getEnterpriseRoleList(search: string | null | undefined): Promise<EnterpriseRoleDto[]> {
        let url_ = this.baseUrl + "/api/Role/GetEnterpriseRoleList?";
        if (search !== undefined && search !== null)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetEnterpriseRoleList(_response);
        });
    }

    protected processGetEnterpriseRoleList(response: Response): Promise<EnterpriseRoleDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EnterpriseRoleDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EnterpriseRoleDto[]>(null as any);
    }

    checkDuplicateRoleName(name: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Role/CheckDuplicateRoleName?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckDuplicateRoleName(_response);
        });
    }

    protected processCheckDuplicateRoleName(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    createRole(command: CreateRoleCommand): Promise<Unit> {
        let url_ = this.baseUrl + "/api/Role/CreateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateRole(_response);
        });
    }

    protected processCreateRole(response: Response): Promise<Unit> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Unit.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Unit>(null as any);
    }

    updateRole(command: UpdateRoleCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/Role/UpdateRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateRole(_response);
        });
    }

    protected processUpdateRole(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    deleteRole(command: DeleteRoleCommand): Promise<string> {
        let url_ = this.baseUrl + "/api/Role/DeleteRole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteRole(_response);
        });
    }

    protected processDeleteRole(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }
}

export class WeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/WeatherForecast/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class LoginResponse implements ILoginResponse {
    accessToken?: string;

    constructor(data?: ILoginResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
        }
    }

    static fromJS(data: any): LoginResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        return data;
    }
}

export interface ILoginResponse {
    accessToken?: string;
}

export class LoginCommand implements ILoginCommand {
    identifier?: string;
    password?: string;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.identifier = _data["identifier"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["identifier"] = this.identifier;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginCommand {
    identifier?: string;
    password?: string;
}

/** Represents a void type, since Void is not a valid return type in C#. */
export class Unit implements IUnit {

    constructor(data?: IUnit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Unit {
        data = typeof data === 'object' ? data : {};
        let result = new Unit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Represents a void type, since Void is not a valid return type in C#. */
export interface IUnit {
}

export class RegisterAnUserCommand implements IRegisterAnUserCommand {
    fullname?: string;
    email?: string;
    phone?: string;
    password?: string;
    confirmPassword?: string;

    constructor(data?: IRegisterAnUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullname = _data["fullname"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
        }
    }

    static fromJS(data: any): RegisterAnUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterAnUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullname"] = this.fullname;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        return data;
    }
}

export interface IRegisterAnUserCommand {
    fullname?: string;
    email?: string;
    phone?: string;
    password?: string;
    confirmPassword?: string;
}

export class SearchPageResponseOfEnterpriseEmployeeDto implements ISearchPageResponseOfEnterpriseEmployeeDto {
    items?: EnterpriseEmployeeDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfEnterpriseEmployeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EnterpriseEmployeeDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfEnterpriseEmployeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfEnterpriseEmployeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfEnterpriseEmployeeDto {
    items?: EnterpriseEmployeeDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class EnterpriseEmployeeDto implements IEnterpriseEmployeeDto {
    userId?: string;
    employeeId?: string;
    employeeName?: string;
    enterpriseRoleName?: string;

    constructor(data?: IEnterpriseEmployeeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.employeeId = _data["employeeId"];
            this.employeeName = _data["employeeName"];
            this.enterpriseRoleName = _data["enterpriseRoleName"];
        }
    }

    static fromJS(data: any): EnterpriseEmployeeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseEmployeeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["employeeId"] = this.employeeId;
        data["employeeName"] = this.employeeName;
        data["enterpriseRoleName"] = this.enterpriseRoleName;
        return data;
    }
}

export interface IEnterpriseEmployeeDto {
    userId?: string;
    employeeId?: string;
    employeeName?: string;
    enterpriseRoleName?: string;
}

export class EnterpriseEmployeeDetailDto implements IEnterpriseEmployeeDetailDto {
    userId?: string;
    employeeId?: string;
    email?: string;
    name?: string;
    enterpriseRoleName?: string;

    constructor(data?: IEnterpriseEmployeeDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.employeeId = _data["employeeId"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.enterpriseRoleName = _data["enterpriseRoleName"];
        }
    }

    static fromJS(data: any): EnterpriseEmployeeDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseEmployeeDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["employeeId"] = this.employeeId;
        data["email"] = this.email;
        data["name"] = this.name;
        data["enterpriseRoleName"] = this.enterpriseRoleName;
        return data;
    }
}

export interface IEnterpriseEmployeeDetailDto {
    userId?: string;
    employeeId?: string;
    email?: string;
    name?: string;
    enterpriseRoleName?: string;
}

export class UserMinimalInfo implements IUserMinimalInfo {
    id?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;

    constructor(data?: IUserMinimalInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): UserMinimalInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserMinimalInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        return data;
    }
}

export interface IUserMinimalInfo {
    id?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
}

export class CreateEmployeeCommand implements ICreateEmployeeCommand {
    email?: string;
    enterpriseRoleName?: string;

    constructor(data?: ICreateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.enterpriseRoleName = _data["enterpriseRoleName"];
        }
    }

    static fromJS(data: any): CreateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["enterpriseRoleName"] = this.enterpriseRoleName;
        return data;
    }
}

export interface ICreateEmployeeCommand {
    email?: string;
    enterpriseRoleName?: string;
}

export class UpdateEmployeeCommand implements IUpdateEmployeeCommand {
    id?: string;
    enterpriseRoleName?: string;

    constructor(data?: IUpdateEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enterpriseRoleName = _data["enterpriseRoleName"];
        }
    }

    static fromJS(data: any): UpdateEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enterpriseRoleName"] = this.enterpriseRoleName;
        return data;
    }
}

export interface IUpdateEmployeeCommand {
    id?: string;
    enterpriseRoleName?: string;
}

export class DeleteEmployeeCommand implements IDeleteEmployeeCommand {
    id?: string;

    constructor(data?: IDeleteEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteEmployeeCommand {
    id?: string;
}

export class JoinEmployeeCommand implements IJoinEmployeeCommand {
    code?: number;

    constructor(data?: IJoinEmployeeCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): JoinEmployeeCommand {
        data = typeof data === 'object' ? data : {};
        let result = new JoinEmployeeCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        return data;
    }
}

export interface IJoinEmployeeCommand {
    code?: number;
}

export class EnterpriseTypeDto implements IEnterpriseTypeDto {
    id?: number;
    name?: string;
    provide?: string;

    constructor(data?: IEnterpriseTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.provide = _data["provide"];
        }
    }

    static fromJS(data: any): EnterpriseTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["provide"] = this.provide;
        return data;
    }
}

export interface IEnterpriseTypeDto {
    id?: number;
    name?: string;
    provide?: string;
}

export class SearchPageResponseOfMyGoodsDto implements ISearchPageResponseOfMyGoodsDto {
    items?: MyGoodsDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfMyGoodsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MyGoodsDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfMyGoodsDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfMyGoodsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfMyGoodsDto {
    items?: MyGoodsDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class MyGoodsDto implements IMyGoodsDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    description?: string | undefined;
    photo?: string | undefined;
    goodsType?: string;
    contain?: number;
    price?: number;
    wholesalerPrices?: WholesalesPrice[];
    n?: number;
    stock?: string;

    constructor(data?: IMyGoodsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enterpriseId = _data["enterpriseId"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.photo = _data["photo"];
            this.goodsType = _data["goodsType"];
            this.contain = _data["contain"];
            this.price = _data["price"];
            if (Array.isArray(_data["wholesalerPrices"])) {
                this.wholesalerPrices = [] as any;
                for (let item of _data["wholesalerPrices"])
                    this.wholesalerPrices!.push(WholesalesPrice.fromJS(item));
            }
            this.n = _data["n"];
            this.stock = _data["stock"];
        }
    }

    static fromJS(data: any): MyGoodsDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyGoodsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enterpriseId"] = this.enterpriseId;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        data["description"] = this.description;
        data["photo"] = this.photo;
        data["goodsType"] = this.goodsType;
        data["contain"] = this.contain;
        data["price"] = this.price;
        if (Array.isArray(this.wholesalerPrices)) {
            data["wholesalerPrices"] = [];
            for (let item of this.wholesalerPrices)
                data["wholesalerPrices"].push(item.toJSON());
        }
        data["n"] = this.n;
        data["stock"] = this.stock;
        return data;
    }
}

export interface IMyGoodsDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    description?: string | undefined;
    photo?: string | undefined;
    goodsType?: string;
    contain?: number;
    price?: number;
    wholesalerPrices?: WholesalesPrice[];
    n?: number;
    stock?: string;
}

export class WholesalesPrice implements IWholesalesPrice {
    wholesalerPrice?: number;
    wholesalerMin?: number;

    constructor(data?: IWholesalesPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wholesalerPrice = _data["wholesalerPrice"];
            this.wholesalerMin = _data["wholesalerMin"];
        }
    }

    static fromJS(data: any): WholesalesPrice {
        data = typeof data === 'object' ? data : {};
        let result = new WholesalesPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wholesalerPrice"] = this.wholesalerPrice;
        data["wholesalerMin"] = this.wholesalerMin;
        return data;
    }
}

export interface IWholesalesPrice {
    wholesalerPrice?: number;
    wholesalerMin?: number;
}

export class MyGoodsInfoDto implements IMyGoodsInfoDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    goodsTypeId?: number;
    description?: string | undefined;
    photo?: string | undefined;
    contain?: number;
    n?: number;
    price?: number;
    buyPrice?: number;
    baseBuyPrice?: number;
    isWholesalerPriceAuto?: boolean;
    availableOnline?: boolean;
    threshold?: number;
    parent?: InfoOfParentOfGoodsForUpdatingDto | undefined;
    groups?: InfoOfGroupOfGoodsForUpdatingDto[];
    wholePrices?: InfoOfWholesalesForUpdatingDto[];

    constructor(data?: IMyGoodsInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enterpriseId = _data["enterpriseId"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
            this.goodsTypeId = _data["goodsTypeId"];
            this.description = _data["description"];
            this.photo = _data["photo"];
            this.contain = _data["contain"];
            this.n = _data["n"];
            this.price = _data["price"];
            this.buyPrice = _data["buyPrice"];
            this.baseBuyPrice = _data["baseBuyPrice"];
            this.isWholesalerPriceAuto = _data["isWholesalerPriceAuto"];
            this.availableOnline = _data["availableOnline"];
            this.threshold = _data["threshold"];
            this.parent = _data["parent"] ? InfoOfParentOfGoodsForUpdatingDto.fromJS(_data["parent"]) : <any>undefined;
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(InfoOfGroupOfGoodsForUpdatingDto.fromJS(item));
            }
            if (Array.isArray(_data["wholePrices"])) {
                this.wholePrices = [] as any;
                for (let item of _data["wholePrices"])
                    this.wholePrices!.push(InfoOfWholesalesForUpdatingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MyGoodsInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyGoodsInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enterpriseId"] = this.enterpriseId;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        data["goodsTypeId"] = this.goodsTypeId;
        data["description"] = this.description;
        data["photo"] = this.photo;
        data["contain"] = this.contain;
        data["n"] = this.n;
        data["price"] = this.price;
        data["buyPrice"] = this.buyPrice;
        data["baseBuyPrice"] = this.baseBuyPrice;
        data["isWholesalerPriceAuto"] = this.isWholesalerPriceAuto;
        data["availableOnline"] = this.availableOnline;
        data["threshold"] = this.threshold;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.wholePrices)) {
            data["wholePrices"] = [];
            for (let item of this.wholePrices)
                data["wholePrices"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMyGoodsInfoDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    goodsTypeId?: number;
    description?: string | undefined;
    photo?: string | undefined;
    contain?: number;
    n?: number;
    price?: number;
    buyPrice?: number;
    baseBuyPrice?: number;
    isWholesalerPriceAuto?: boolean;
    availableOnline?: boolean;
    threshold?: number;
    parent?: InfoOfParentOfGoodsForUpdatingDto | undefined;
    groups?: InfoOfGroupOfGoodsForUpdatingDto[];
    wholePrices?: InfoOfWholesalesForUpdatingDto[];
}

export class InfoOfParentOfGoodsForUpdatingDto implements IInfoOfParentOfGoodsForUpdatingDto {
    id?: string;
    barcode?: string;
    name?: string;

    constructor(data?: IInfoOfParentOfGoodsForUpdatingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): InfoOfParentOfGoodsForUpdatingDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoOfParentOfGoodsForUpdatingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        return data;
    }
}

export interface IInfoOfParentOfGoodsForUpdatingDto {
    id?: string;
    barcode?: string;
    name?: string;
}

export class InfoOfGroupOfGoodsForUpdatingDto implements IInfoOfGroupOfGoodsForUpdatingDto {
    id?: string;
    name?: string;
    members?: InfoOfGroupMemberOfGoodsForUpdatingDto[];

    constructor(data?: IInfoOfGroupOfGoodsForUpdatingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(InfoOfGroupMemberOfGoodsForUpdatingDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InfoOfGroupOfGoodsForUpdatingDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoOfGroupOfGoodsForUpdatingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data;
    }
}

export interface IInfoOfGroupOfGoodsForUpdatingDto {
    id?: string;
    name?: string;
    members?: InfoOfGroupMemberOfGoodsForUpdatingDto[];
}

export class InfoOfGroupMemberOfGoodsForUpdatingDto implements IInfoOfGroupMemberOfGoodsForUpdatingDto {
    id?: string;
    barcode?: string;
    name?: string;

    constructor(data?: IInfoOfGroupMemberOfGoodsForUpdatingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): InfoOfGroupMemberOfGoodsForUpdatingDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoOfGroupMemberOfGoodsForUpdatingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        return data;
    }
}

export interface IInfoOfGroupMemberOfGoodsForUpdatingDto {
    id?: string;
    barcode?: string;
    name?: string;
}

export class InfoOfWholesalesForUpdatingDto implements IInfoOfWholesalesForUpdatingDto {
    id?: string;
    wholesalerPrice?: number;
    wholesalerMin?: number;

    constructor(data?: IInfoOfWholesalesForUpdatingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.wholesalerPrice = _data["wholesalerPrice"];
            this.wholesalerMin = _data["wholesalerMin"];
        }
    }

    static fromJS(data: any): InfoOfWholesalesForUpdatingDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoOfWholesalesForUpdatingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["wholesalerPrice"] = this.wholesalerPrice;
        data["wholesalerMin"] = this.wholesalerMin;
        return data;
    }
}

export interface IInfoOfWholesalesForUpdatingDto {
    id?: string;
    wholesalerPrice?: number;
    wholesalerMin?: number;
}

export class MyGoodsForCashierDto implements IMyGoodsForCashierDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    price?: number;
    wholessalePrices?: WholesalesPrice[];
    isWholesalerPriceAuto?: boolean;

    constructor(data?: IMyGoodsForCashierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enterpriseId = _data["enterpriseId"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
            this.price = _data["price"];
            if (Array.isArray(_data["wholessalePrices"])) {
                this.wholessalePrices = [] as any;
                for (let item of _data["wholessalePrices"])
                    this.wholessalePrices!.push(WholesalesPrice.fromJS(item));
            }
            this.isWholesalerPriceAuto = _data["isWholesalerPriceAuto"];
        }
    }

    static fromJS(data: any): MyGoodsForCashierDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyGoodsForCashierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enterpriseId"] = this.enterpriseId;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        data["price"] = this.price;
        if (Array.isArray(this.wholessalePrices)) {
            data["wholessalePrices"] = [];
            for (let item of this.wholessalePrices)
                data["wholessalePrices"].push(item.toJSON());
        }
        data["isWholesalerPriceAuto"] = this.isWholesalerPriceAuto;
        return data;
    }
}

export interface IMyGoodsForCashierDto {
    id?: string;
    enterpriseId?: string;
    barcode?: string;
    name?: string;
    price?: number;
    wholessalePrices?: WholesalesPrice[];
    isWholesalerPriceAuto?: boolean;
}

export class GoodsTypeDto implements IGoodsTypeDto {
    id?: number;
    name?: string;
    parentGoodsTypeId?: number | undefined;
    subGoodsTypes?: GoodsTypeDto[] | undefined;

    constructor(data?: IGoodsTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.parentGoodsTypeId = _data["parentGoodsTypeId"];
            if (Array.isArray(_data["subGoodsTypes"])) {
                this.subGoodsTypes = [] as any;
                for (let item of _data["subGoodsTypes"])
                    this.subGoodsTypes!.push(GoodsTypeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GoodsTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new GoodsTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["parentGoodsTypeId"] = this.parentGoodsTypeId;
        if (Array.isArray(this.subGoodsTypes)) {
            data["subGoodsTypes"] = [];
            for (let item of this.subGoodsTypes)
                data["subGoodsTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGoodsTypeDto {
    id?: number;
    name?: string;
    parentGoodsTypeId?: number | undefined;
    subGoodsTypes?: GoodsTypeDto[] | undefined;
}

export class SearchPageResponseOfMyEnterpriseDto implements ISearchPageResponseOfMyEnterpriseDto {
    items?: MyEnterpriseDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfMyEnterpriseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MyEnterpriseDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfMyEnterpriseDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfMyEnterpriseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfMyEnterpriseDto {
    items?: MyEnterpriseDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class MyEnterpriseDto implements IMyEnterpriseDto {
    id?: string;
    code?: string;
    name?: string;
    photo?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    enterpriseType?: string;
    address?: string | undefined;
    owned?: boolean;

    constructor(data?: IMyEnterpriseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.photo = _data["photo"];
            this.phone = _data["phone"];
            this.email = _data["email"];
            this.enterpriseType = _data["enterpriseType"];
            this.address = _data["address"];
            this.owned = _data["owned"];
        }
    }

    static fromJS(data: any): MyEnterpriseDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyEnterpriseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["photo"] = this.photo;
        data["phone"] = this.phone;
        data["email"] = this.email;
        data["enterpriseType"] = this.enterpriseType;
        data["address"] = this.address;
        data["owned"] = this.owned;
        return data;
    }
}

export interface IMyEnterpriseDto {
    id?: string;
    code?: string;
    name?: string;
    photo?: string | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    enterpriseType?: string;
    address?: string | undefined;
    owned?: boolean;
}

export class EnterpriseTokenDto implements IEnterpriseTokenDto {
    token?: string;

    constructor(data?: IEnterpriseTokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): EnterpriseTokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseTokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface IEnterpriseTokenDto {
    token?: string;
}

export class ResultOmzetLineDiagram implements IResultOmzetLineDiagram {
    items?: ResultOmzetLineDiagramItem[];
    average?: number;

    constructor(data?: IResultOmzetLineDiagram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ResultOmzetLineDiagramItem.fromJS(item));
            }
            this.average = _data["average"];
        }
    }

    static fromJS(data: any): ResultOmzetLineDiagram {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOmzetLineDiagram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["average"] = this.average;
        return data;
    }
}

export interface IResultOmzetLineDiagram {
    items?: ResultOmzetLineDiagramItem[];
    average?: number;
}

export class ResultOmzetLineDiagramItem implements IResultOmzetLineDiagramItem {
    dateTime?: Date;
    total?: number;

    constructor(data?: IResultOmzetLineDiagramItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.total = _data["total"];
        }
    }

    static fromJS(data: any): ResultOmzetLineDiagramItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOmzetLineDiagramItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["total"] = this.total;
        return data;
    }
}

export interface IResultOmzetLineDiagramItem {
    dateTime?: Date;
    total?: number;
}

export class WholesalesPrice2 implements IWholesalesPrice2 {
    wholesalerPrice?: number;
    wholesalerMin?: number;

    constructor(data?: IWholesalesPrice2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wholesalerPrice = _data["wholesalerPrice"];
            this.wholesalerMin = _data["wholesalerMin"];
        }
    }

    static fromJS(data: any): WholesalesPrice2 {
        data = typeof data === 'object' ? data : {};
        let result = new WholesalesPrice2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wholesalerPrice"] = this.wholesalerPrice;
        data["wholesalerMin"] = this.wholesalerMin;
        return data;
    }
}

export interface IWholesalesPrice2 {
    wholesalerPrice?: number;
    wholesalerMin?: number;
}

export class UpdateMyGoodsSellingPriceCommand implements IUpdateMyGoodsSellingPriceCommand {
    id?: string;
    price?: number;
    wholesalePrices?: UpdateMyGoodsWholesalePrice[] | undefined;

    constructor(data?: IUpdateMyGoodsSellingPriceCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.price = _data["price"];
            if (Array.isArray(_data["wholesalePrices"])) {
                this.wholesalePrices = [] as any;
                for (let item of _data["wholesalePrices"])
                    this.wholesalePrices!.push(UpdateMyGoodsWholesalePrice.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateMyGoodsSellingPriceCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMyGoodsSellingPriceCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["price"] = this.price;
        if (Array.isArray(this.wholesalePrices)) {
            data["wholesalePrices"] = [];
            for (let item of this.wholesalePrices)
                data["wholesalePrices"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateMyGoodsSellingPriceCommand {
    id?: string;
    price?: number;
    wholesalePrices?: UpdateMyGoodsWholesalePrice[] | undefined;
}

export class UpdateMyGoodsWholesalePrice implements IUpdateMyGoodsWholesalePrice {
    wholesalerPrice?: number;
    wholesalerMin?: number;

    constructor(data?: IUpdateMyGoodsWholesalePrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wholesalerPrice = _data["wholesalerPrice"];
            this.wholesalerMin = _data["wholesalerMin"];
        }
    }

    static fromJS(data: any): UpdateMyGoodsWholesalePrice {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMyGoodsWholesalePrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wholesalerPrice"] = this.wholesalerPrice;
        data["wholesalerMin"] = this.wholesalerMin;
        return data;
    }
}

export interface IUpdateMyGoodsWholesalePrice {
    wholesalerPrice?: number;
    wholesalerMin?: number;
}

export class AddMyGoodsStockCommand implements IAddMyGoodsStockCommand {
    id?: string;
    increment?: number;
    buyPriceTotal?: number;

    constructor(data?: IAddMyGoodsStockCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.increment = _data["increment"];
            this.buyPriceTotal = _data["buyPriceTotal"];
        }
    }

    static fromJS(data: any): AddMyGoodsStockCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddMyGoodsStockCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["increment"] = this.increment;
        data["buyPriceTotal"] = this.buyPriceTotal;
        return data;
    }
}

export interface IAddMyGoodsStockCommand {
    id?: string;
    increment?: number;
    buyPriceTotal?: number;
}

export class AdjustMyGoodsStockCommand implements IAdjustMyGoodsStockCommand {
    id?: string;
    actualStock?: number;

    constructor(data?: IAdjustMyGoodsStockCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.actualStock = _data["actualStock"];
        }
    }

    static fromJS(data: any): AdjustMyGoodsStockCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AdjustMyGoodsStockCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["actualStock"] = this.actualStock;
        return data;
    }
}

export interface IAdjustMyGoodsStockCommand {
    id?: string;
    actualStock?: number;
}

export class ResultSellPriceLineDiagram implements IResultSellPriceLineDiagram {
    type?: DiagramRangeSellPriceType;
    items?: ResultSellPriceLineDiagramItem[];
    average?: number;

    constructor(data?: IResultSellPriceLineDiagram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ResultSellPriceLineDiagramItem.fromJS(item));
            }
            this.average = _data["average"];
        }
    }

    static fromJS(data: any): ResultSellPriceLineDiagram {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSellPriceLineDiagram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["average"] = this.average;
        return data;
    }
}

export interface IResultSellPriceLineDiagram {
    type?: DiagramRangeSellPriceType;
    items?: ResultSellPriceLineDiagramItem[];
    average?: number;
}

export enum DiagramRangeSellPriceType {
    PRICE = 1,
    CHANGE = 2,
}

export class ResultSellPriceLineDiagramItem implements IResultSellPriceLineDiagramItem {
    dateTime?: Date;
    price?: number;

    constructor(data?: IResultSellPriceLineDiagramItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): ResultSellPriceLineDiagramItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSellPriceLineDiagramItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["price"] = this.price;
        return data;
    }
}

export interface IResultSellPriceLineDiagramItem {
    dateTime?: Date;
    price?: number;
}

export class ResultBuyPriceLineDiagram implements IResultBuyPriceLineDiagram {
    type?: DiagramRangeBuyPriceType;
    items?: ResultBuyPriceLineDiagramItem[];
    average?: number;

    constructor(data?: IResultBuyPriceLineDiagram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ResultBuyPriceLineDiagramItem.fromJS(item));
            }
            this.average = _data["average"];
        }
    }

    static fromJS(data: any): ResultBuyPriceLineDiagram {
        data = typeof data === 'object' ? data : {};
        let result = new ResultBuyPriceLineDiagram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["average"] = this.average;
        return data;
    }
}

export interface IResultBuyPriceLineDiagram {
    type?: DiagramRangeBuyPriceType;
    items?: ResultBuyPriceLineDiagramItem[];
    average?: number;
}

export enum DiagramRangeBuyPriceType {
    PRICE = 1,
    CHANGE = 2,
}

export class ResultBuyPriceLineDiagramItem implements IResultBuyPriceLineDiagramItem {
    dateTime?: Date;
    price?: number;

    constructor(data?: IResultBuyPriceLineDiagramItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): ResultBuyPriceLineDiagramItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultBuyPriceLineDiagramItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["price"] = this.price;
        return data;
    }
}

export interface IResultBuyPriceLineDiagramItem {
    dateTime?: Date;
    price?: number;
}

export class ResultSoldLineDiagram implements IResultSoldLineDiagram {
    type?: DiagramRangeSoldType;
    items?: ResultSoldLineDiagramItem[];
    average?: number;

    constructor(data?: IResultSoldLineDiagram) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ResultSoldLineDiagramItem.fromJS(item));
            }
            this.average = _data["average"];
        }
    }

    static fromJS(data: any): ResultSoldLineDiagram {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSoldLineDiagram();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["average"] = this.average;
        return data;
    }
}

export interface IResultSoldLineDiagram {
    type?: DiagramRangeSoldType;
    items?: ResultSoldLineDiagramItem[];
    average?: number;
}

export enum DiagramRangeSoldType {
    SUM = 1,
    AVERAGE = 2,
    MAX = 3,
    MIN = 4,
}

export class ResultSoldLineDiagramItem implements IResultSoldLineDiagramItem {
    dateTime?: Date;
    n?: number;

    constructor(data?: IResultSoldLineDiagramItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.n = _data["n"];
        }
    }

    static fromJS(data: any): ResultSoldLineDiagramItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultSoldLineDiagramItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["n"] = this.n;
        return data;
    }
}

export interface IResultSoldLineDiagramItem {
    dateTime?: Date;
    n?: number;
}

export class SearchPageResponseOfMyGoodsGroupDto implements ISearchPageResponseOfMyGoodsGroupDto {
    items?: MyGoodsGroupDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfMyGoodsGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MyGoodsGroupDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfMyGoodsGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfMyGoodsGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfMyGoodsGroupDto {
    items?: MyGoodsGroupDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class MyGoodsGroupDto implements IMyGoodsGroupDto {
    id?: string;
    name?: string;
    members?: MyGoodsGroupMemberDto[];

    constructor(data?: IMyGoodsGroupDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(MyGoodsGroupMemberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MyGoodsGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyGoodsGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMyGoodsGroupDto {
    id?: string;
    name?: string;
    members?: MyGoodsGroupMemberDto[];
}

export class MyGoodsGroupMemberDto implements IMyGoodsGroupMemberDto {
    id?: string;
    name?: string;
    photoUrl?: string | undefined;

    constructor(data?: IMyGoodsGroupMemberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
        }
    }

    static fromJS(data: any): MyGoodsGroupMemberDto {
        data = typeof data === 'object' ? data : {};
        let result = new MyGoodsGroupMemberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        return data;
    }
}

export interface IMyGoodsGroupMemberDto {
    id?: string;
    name?: string;
    photoUrl?: string | undefined;
}

export class CreateGoodsGroupCommand implements ICreateGoodsGroupCommand {
    name?: string;
    description?: string | undefined;

    constructor(data?: ICreateGoodsGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CreateGoodsGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGoodsGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICreateGoodsGroupCommand {
    name?: string;
    description?: string | undefined;
}

export class CreateOrderCashierCommandResponse implements ICreateOrderCashierCommandResponse {
    id?: string;

    constructor(data?: ICreateOrderCashierCommandResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateOrderCashierCommandResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrderCashierCommandResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateOrderCashierCommandResponse {
    id?: string;
}

export class ItemOrdered implements IItemOrdered {
    goodsId?: string;
    isWholesalerPrice?: number;
    discountItem?: number;
    discountItemTotal?: number;
    pricePerItem?: number;
    pricePerItemAfterDiscount?: number;
    priceTotal?: number;
    priceTotalAfterDiscount?: number;
    priceTotalFinal?: number;
    n?: number;

    constructor(data?: IItemOrdered) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.goodsId = _data["goodsId"];
            this.isWholesalerPrice = _data["isWholesalerPrice"];
            this.discountItem = _data["discountItem"];
            this.discountItemTotal = _data["discountItemTotal"];
            this.pricePerItem = _data["pricePerItem"];
            this.pricePerItemAfterDiscount = _data["pricePerItemAfterDiscount"];
            this.priceTotal = _data["priceTotal"];
            this.priceTotalAfterDiscount = _data["priceTotalAfterDiscount"];
            this.priceTotalFinal = _data["priceTotalFinal"];
            this.n = _data["n"];
        }
    }

    static fromJS(data: any): ItemOrdered {
        data = typeof data === 'object' ? data : {};
        let result = new ItemOrdered();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["goodsId"] = this.goodsId;
        data["isWholesalerPrice"] = this.isWholesalerPrice;
        data["discountItem"] = this.discountItem;
        data["discountItemTotal"] = this.discountItemTotal;
        data["pricePerItem"] = this.pricePerItem;
        data["pricePerItemAfterDiscount"] = this.pricePerItemAfterDiscount;
        data["priceTotal"] = this.priceTotal;
        data["priceTotalAfterDiscount"] = this.priceTotalAfterDiscount;
        data["priceTotalFinal"] = this.priceTotalFinal;
        data["n"] = this.n;
        return data;
    }
}

export interface IItemOrdered {
    goodsId?: string;
    isWholesalerPrice?: number;
    discountItem?: number;
    discountItemTotal?: number;
    pricePerItem?: number;
    pricePerItemAfterDiscount?: number;
    priceTotal?: number;
    priceTotalAfterDiscount?: number;
    priceTotalFinal?: number;
    n?: number;
}

export class SearchPageResponseOfOrderDto implements ISearchPageResponseOfOrderDto {
    items?: OrderDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(OrderDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfOrderDto {
    items?: OrderDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class OrderDto implements IOrderDto {
    id?: string;
    total?: number;
    payment?: number;
    return?: number;
    paymentMethod?: string;
    orderProgress?: string;
    isOnline?: boolean;
    createdAt?: Date;

    constructor(data?: IOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.total = _data["total"];
            this.payment = _data["payment"];
            this.return = _data["return"];
            this.paymentMethod = _data["paymentMethod"];
            this.orderProgress = _data["orderProgress"];
            this.isOnline = _data["isOnline"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["total"] = this.total;
        data["payment"] = this.payment;
        data["return"] = this.return;
        data["paymentMethod"] = this.paymentMethod;
        data["orderProgress"] = this.orderProgress;
        data["isOnline"] = this.isOnline;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IOrderDto {
    id?: string;
    total?: number;
    payment?: number;
    return?: number;
    paymentMethod?: string;
    orderProgress?: string;
    isOnline?: boolean;
    createdAt?: Date;
}

export class DetailOrderDto implements IDetailOrderDto {
    id?: string;
    total?: number;
    payment?: number;
    return?: number;
    paymentMethodName?: string;
    orderProgresses?: OrderProgressList[] | undefined;
    isOnline?: boolean;
    createdAt?: Date;
    goodsOrdereds?: OrderGoodsList[] | undefined;
    to?: string | undefined;
    createdById?: string;
    createdByName?: string;

    constructor(data?: IDetailOrderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.total = _data["total"];
            this.payment = _data["payment"];
            this.return = _data["return"];
            this.paymentMethodName = _data["paymentMethodName"];
            if (Array.isArray(_data["orderProgresses"])) {
                this.orderProgresses = [] as any;
                for (let item of _data["orderProgresses"])
                    this.orderProgresses!.push(OrderProgressList.fromJS(item));
            }
            this.isOnline = _data["isOnline"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["goodsOrdereds"])) {
                this.goodsOrdereds = [] as any;
                for (let item of _data["goodsOrdereds"])
                    this.goodsOrdereds!.push(OrderGoodsList.fromJS(item));
            }
            this.to = _data["to"];
            this.createdById = _data["createdById"];
            this.createdByName = _data["createdByName"];
        }
    }

    static fromJS(data: any): DetailOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new DetailOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["total"] = this.total;
        data["payment"] = this.payment;
        data["return"] = this.return;
        data["paymentMethodName"] = this.paymentMethodName;
        if (Array.isArray(this.orderProgresses)) {
            data["orderProgresses"] = [];
            for (let item of this.orderProgresses)
                data["orderProgresses"].push(item.toJSON());
        }
        data["isOnline"] = this.isOnline;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.goodsOrdereds)) {
            data["goodsOrdereds"] = [];
            for (let item of this.goodsOrdereds)
                data["goodsOrdereds"].push(item.toJSON());
        }
        data["to"] = this.to;
        data["createdById"] = this.createdById;
        data["createdByName"] = this.createdByName;
        return data;
    }
}

export interface IDetailOrderDto {
    id?: string;
    total?: number;
    payment?: number;
    return?: number;
    paymentMethodName?: string;
    orderProgresses?: OrderProgressList[] | undefined;
    isOnline?: boolean;
    createdAt?: Date;
    goodsOrdereds?: OrderGoodsList[] | undefined;
    to?: string | undefined;
    createdById?: string;
    createdByName?: string;
}

export class OrderProgressList implements IOrderProgressList {
    id?: string;
    createdAt?: Date;
    name?: string;

    constructor(data?: IOrderProgressList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): OrderProgressList {
        data = typeof data === 'object' ? data : {};
        let result = new OrderProgressList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["name"] = this.name;
        return data;
    }
}

export interface IOrderProgressList {
    id?: string;
    createdAt?: Date;
    name?: string;
}

export class OrderGoodsList implements IOrderGoodsList {
    id?: string;
    barcode?: string;
    name?: string;
    isWholesalerPrice?: boolean;
    discountItem?: number;
    discountItemTotal?: number;
    pricePerItem?: number;
    pricePerItemAfterDiscount?: number;
    priceTotal?: number;
    priceTotalAfterDiscount?: number;
    priceTotalFinal?: number;
    n?: number;

    constructor(data?: IOrderGoodsList) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.barcode = _data["barcode"];
            this.name = _data["name"];
            this.isWholesalerPrice = _data["isWholesalerPrice"];
            this.discountItem = _data["discountItem"];
            this.discountItemTotal = _data["discountItemTotal"];
            this.pricePerItem = _data["pricePerItem"];
            this.pricePerItemAfterDiscount = _data["pricePerItemAfterDiscount"];
            this.priceTotal = _data["priceTotal"];
            this.priceTotalAfterDiscount = _data["priceTotalAfterDiscount"];
            this.priceTotalFinal = _data["priceTotalFinal"];
            this.n = _data["n"];
        }
    }

    static fromJS(data: any): OrderGoodsList {
        data = typeof data === 'object' ? data : {};
        let result = new OrderGoodsList();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["barcode"] = this.barcode;
        data["name"] = this.name;
        data["isWholesalerPrice"] = this.isWholesalerPrice;
        data["discountItem"] = this.discountItem;
        data["discountItemTotal"] = this.discountItemTotal;
        data["pricePerItem"] = this.pricePerItem;
        data["pricePerItemAfterDiscount"] = this.pricePerItemAfterDiscount;
        data["priceTotal"] = this.priceTotal;
        data["priceTotalAfterDiscount"] = this.priceTotalAfterDiscount;
        data["priceTotalFinal"] = this.priceTotalFinal;
        data["n"] = this.n;
        return data;
    }
}

export interface IOrderGoodsList {
    id?: string;
    barcode?: string;
    name?: string;
    isWholesalerPrice?: boolean;
    discountItem?: number;
    discountItemTotal?: number;
    pricePerItem?: number;
    pricePerItemAfterDiscount?: number;
    priceTotal?: number;
    priceTotalAfterDiscount?: number;
    priceTotalFinal?: number;
    n?: number;
}

export class EnterpriseClaimDto implements IEnterpriseClaimDto {
    id?: string;
    context?: string;
    feature?: string;
    action?: string;
    description?: string;

    constructor(data?: IEnterpriseClaimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.context = _data["context"];
            this.feature = _data["feature"];
            this.action = _data["action"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): EnterpriseClaimDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseClaimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["context"] = this.context;
        data["feature"] = this.feature;
        data["action"] = this.action;
        data["description"] = this.description;
        return data;
    }
}

export interface IEnterpriseClaimDto {
    id?: string;
    context?: string;
    feature?: string;
    action?: string;
    description?: string;
}

export class GetAllEnterpriseClaimsQuery implements IGetAllEnterpriseClaimsQuery {

    constructor(data?: IGetAllEnterpriseClaimsQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): GetAllEnterpriseClaimsQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllEnterpriseClaimsQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IGetAllEnterpriseClaimsQuery {
}

export class EnterpriseRoleDetailDto implements IEnterpriseRoleDetailDto {
    id?: string;
    name?: string;
    claims?: string[];

    constructor(data?: IEnterpriseRoleDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(item);
            }
        }
    }

    static fromJS(data: any): EnterpriseRoleDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseRoleDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item);
        }
        return data;
    }
}

export interface IEnterpriseRoleDetailDto {
    id?: string;
    name?: string;
    claims?: string[];
}

export class SearchPageResponseOfEnterpriseRoleDto implements ISearchPageResponseOfEnterpriseRoleDto {
    items?: EnterpriseRoleDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: ISearchPageResponseOfEnterpriseRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(EnterpriseRoleDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): SearchPageResponseOfEnterpriseRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchPageResponseOfEnterpriseRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface ISearchPageResponseOfEnterpriseRoleDto {
    items?: EnterpriseRoleDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class EnterpriseRoleDto implements IEnterpriseRoleDto {
    id?: string;
    name?: string;

    constructor(data?: IEnterpriseRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): EnterpriseRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new EnterpriseRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IEnterpriseRoleDto {
    id?: string;
    name?: string;
}

export class CreateRoleCommand implements ICreateRoleCommand {
    name?: string;
    claims?: RoleClaimItem[];

    constructor(data?: ICreateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(RoleClaimItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICreateRoleCommand {
    name?: string;
    claims?: RoleClaimItem[];
}

export class RoleClaimItem implements IRoleClaimItem {
    id?: string;
    authorize?: number;

    constructor(data?: IRoleClaimItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.authorize = _data["authorize"];
        }
    }

    static fromJS(data: any): RoleClaimItem {
        data = typeof data === 'object' ? data : {};
        let result = new RoleClaimItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["authorize"] = this.authorize;
        return data;
    }
}

export interface IRoleClaimItem {
    id?: string;
    authorize?: number;
}

export class UpdateRoleCommand implements IUpdateRoleCommand {
    id?: string;
    name?: string;
    claims?: RoleClaimItem[];

    constructor(data?: IUpdateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(RoleClaimItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUpdateRoleCommand {
    id?: string;
    name?: string;
    claims?: RoleClaimItem[];
}

export class DeleteRoleCommand implements IDeleteRoleCommand {
    id?: string;

    constructor(data?: IDeleteRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteRoleCommand {
    id?: string;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}